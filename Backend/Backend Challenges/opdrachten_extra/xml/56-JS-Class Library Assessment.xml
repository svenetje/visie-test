<Assignment xmlns="http://schemas.datacontract.org/2004/07/Syn_OpenAI_AppLib.Data" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><AssignmentText>Titel: Class Library Assessment

Doel: Ontwikkel een JavaScript bibliotheek met daarin klassen om te communiceren met verschillende API's.

Vereisten:
1. Creëer JavaScript klassen voor ten minste 3 verschillende API's naar keuze. Enkele voorbeelden van API's zijn:
   - OpenWeatherMap API (weerinformatie): https://openweathermap.org/api
   - The Movie Database API (filminformatie): https://www.themoviedb.org/documentation/api
   - REST Countries API (landinformatie): https://restcountries.com/

   Meld je aan voor de benodigde API-sleutels en integreer deze op een veilige manier in je code, bijvoorbeeld met behulp van environment variabelen.

2. Elke klasse moet minimaal 4 methoden bevatten om gegevens op te halen en te manipuleren. Voorbeelden van methoden zijn:
   - Zoeken op naam
   - Ophalen van details op basis van ID
   - Ophalen van de populairste items
   - Filteren van items op basis van bepaalde criteria

3. Schrijf JSDoc-commentaar (https://jsdoc.app/) voor elke klasse en methode om de functionaliteit en het gebruik ervan uit te leggen.

4. Ontwerp een eenvoudige gebruikersinterface in HTML en CSS waarmee gebruikers de verschillende API's kunnen testen en de gegevens die door de klassen worden geretourneerd, kunnen bekijken.

5. Schrijf een testbestand met minimaal 2 testgevallen per API-klasse om de functionaliteit van de klas te testen. Gebruik hiervoor bijvoorbeeld het Jasmine framework (https://jasmine.github.io/).

Opdracht:
1. Kies 3 API's waarvoor je JavaScript-klassen wilt maken.
2. Meld je aan voor de benodigde API-sleutels en sla deze op een veilige manier op.
3. Maak een nieuw JavaScript-project en implementeer de klassen voor de gekozen API's.
4. Implementeer de vereiste methoden in elke klasse.
5. Schrijf JSDoc-commentaar voor de klassen en methoden.
6. Ontwikkel een eenvoudige gebruikersinterface om de klassen te testen en de resultaten te tonen.
7. Schrijf testbestanden met testgevallen om de functionaliteit van de klassen te testen en zorg ervoor dat alle tests slagen.

Opmerkingen:
- Houd rekening met foutafhandeling in je klassen en methoden. Zorg ervoor dat eventuele fouten op een duidelijke manier worden afgehandeld en weergegeven in de gebruikersinterface.
- Gebruik moderne JavaScript-technieken zoals async/await en fetch() om gegevens op te halen van de API's.
- Zorg ervoor dat je code goed gestructureerd is en volg best practices voor het schrijven van JavaScript-code.</AssignmentText><Config><Difficulty>Moeilijk</Difficulty><ExtraDescription> bitly, google docs en spreadsheets, google search, weerdata. classes en interfaces voor de apis dashboards. "</ExtraDescription><ID>56</ID><Language>JS</Language><Reqs>"classes voor de apis </Reqs><Title>Class Library Assessment</Title></Config><ID>56</ID><RawResponseObj z:Id="i1" xmlns:a="http://schemas.datacontract.org/2004/07/Syn_OpenAI_CoreLib.Core.Models.Data" xmlns:z="http://schemas.microsoft.com/2003/10/Serialization/"><created xmlns="http://schemas.datacontract.org/2004/07/Syn_OpenAI_CoreLib.Data">1682888890</created><id xmlns="http://schemas.datacontract.org/2004/07/Syn_OpenAI_CoreLib.Data">chatcmpl-7B8Z8SuMUtPJ8qkSegYezHv3t8Q2O</id><a:choices><a:API_AIResponse_ChoicesJSON><a:finish_reason>stop</a:finish_reason><a:index>0</a:index><a:message><a:content>Titel: Class Library Assessment

Doel: Ontwikkel een JavaScript bibliotheek met daarin klassen om te communiceren met verschillende API's.

Vereisten:
1. Creëer JavaScript klassen voor ten minste 3 verschillende API's naar keuze. Enkele voorbeelden van API's zijn:
   - OpenWeatherMap API (weerinformatie): https://openweathermap.org/api
   - The Movie Database API (filminformatie): https://www.themoviedb.org/documentation/api
   - REST Countries API (landinformatie): https://restcountries.com/

   Meld je aan voor de benodigde API-sleutels en integreer deze op een veilige manier in je code, bijvoorbeeld met behulp van environment variabelen.

2. Elke klasse moet minimaal 4 methoden bevatten om gegevens op te halen en te manipuleren. Voorbeelden van methoden zijn:
   - Zoeken op naam
   - Ophalen van details op basis van ID
   - Ophalen van de populairste items
   - Filteren van items op basis van bepaalde criteria

3. Schrijf JSDoc-commentaar (https://jsdoc.app/) voor elke klasse en methode om de functionaliteit en het gebruik ervan uit te leggen.

4. Ontwerp een eenvoudige gebruikersinterface in HTML en CSS waarmee gebruikers de verschillende API's kunnen testen en de gegevens die door de klassen worden geretourneerd, kunnen bekijken.

5. Schrijf een testbestand met minimaal 2 testgevallen per API-klasse om de functionaliteit van de klas te testen. Gebruik hiervoor bijvoorbeeld het Jasmine framework (https://jasmine.github.io/).

Opdracht:
1. Kies 3 API's waarvoor je JavaScript-klassen wilt maken.
2. Meld je aan voor de benodigde API-sleutels en sla deze op een veilige manier op.
3. Maak een nieuw JavaScript-project en implementeer de klassen voor de gekozen API's.
4. Implementeer de vereiste methoden in elke klasse.
5. Schrijf JSDoc-commentaar voor de klassen en methoden.
6. Ontwikkel een eenvoudige gebruikersinterface om de klassen te testen en de resultaten te tonen.
7. Schrijf testbestanden met testgevallen om de functionaliteit van de klassen te testen en zorg ervoor dat alle tests slagen.

Opmerkingen:
- Houd rekening met foutafhandeling in je klassen en methoden. Zorg ervoor dat eventuele fouten op een duidelijke manier worden afgehandeld en weergegeven in de gebruikersinterface.
- Gebruik moderne JavaScript-technieken zoals async/await en fetch() om gegevens op te halen van de API's.
- Zorg ervoor dat je code goed gestructureerd is en volg best practices voor het schrijven van JavaScript-code.</a:content><a:role>assistant</a:role></a:message></a:API_AIResponse_ChoicesJSON></a:choices><a:model>gpt-4-0314</a:model><a:object>chat.completion</a:object><a:usage><a:completion_tokens>687</a:completion_tokens><a:prompt_tokens>701</a:prompt_tokens><a:total_tokens>1388</a:total_tokens></a:usage></RawResponseObj></Assignment>