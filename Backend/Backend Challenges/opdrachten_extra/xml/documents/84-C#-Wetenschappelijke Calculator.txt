Quick Details
Opdracht ID : 84
Opdracht titel : Wetenschappelijke Calculator
Opdracht Programmeertalen en/of tech : C#
Opdracht (geschatte) moeilijkheidsgraad : Gemiddeld
Opdracht Eisen : plus, minus, keer, gedeeld door, wetenschappelijke notatie, wetenschappelijke formules
Opdracht Extra Omschrijving : 
Titel: Wetenschappelijke Calculator

Doel:
Het doel van deze opdracht is om een wetenschappelijke calculator te ontwerpen en te implementeren met behulp van de C# programmeertaal
Deze calculator helpt gebruikers bij het uitvoeren van verschillende wiskundige bewerkingen en wetenschappelijke berekeningen.

Vereisten:
1
De calculator moet basis wiskundige bewerkingen kunnen uitvoeren zoals optellen, aftrekken, vermenigvuldigen en delen.
2
De calculator moet wetenschappelijke notatie kunnen ondersteunen (bijv
1.23e+4), hiermee kunnen grote en kleine getallen eenvoudiger worden weergegeven en berekend.
3
De calculator moet enkele veelgebruikte wetenschappelijke formules kunnen oplossen (bijv
kwadratische vergelijkingen, exponentiële functies, logaritmische functies, enz.)
Dit helpt bij het oplossen van complexere wiskundige problemen.
4
Het programma moet een gebruiksvriendelijke interface hebben (bijv
een consoletoepassing of een eenvoudige grafische gebruikersinterface), zodat gebruikers eenvoudig getallen en formules kunnen invoeren en resultaten kunnen bekijken.

Moeilijkheidsgraad: Gemiddeld

Instructies:

1
Creëer een nieuw C#-project (bijv
een ConsoleApp of een WPF-applicatie) om de basisstructuur van het programma op te zetten.
2
Ontwerp en implementeer een Calculator-klasse met de volgende methoden:
  
Add(double a, double b)
voor het optellen van twee getallen
  
Subtract(double a, double b)
voor het aftrekken van twee getallen
  
Multiply(double a, double b)
voor het vermenigvuldigen van twee getallen
  
Divide(double a, double b)
voor het delen van twee getallen
  
SolveQuadraticEquation(double a, double b, double c)
voor het oplossen van kwadratische vergelijkingen van de vorm ax^2 + bx + c = 0
  
ExponentialFunction(double a, double x)
voor het berekenen van exponentiële functies van de vorm a^x
  
LogarithmicFunction(double x)
voor het berekenen van natuurlijke logaritmische functies ln(x)
3
Implementeer een methode om invoer in wetenschappelijke notatie te accepteren en om te zetten naar een standaard decimale notatie (bijv
1.23e+4 => 12300)
Dit maakt het mogelijk om eenvoudig met grote en kleine getallen te werken.
4
Creëer een gebruikersinterface voor het programma, waar gebruikers getallen en formules kunnen invoeren en resultaten kunnen zien
Dit kan een consoletoepassing zijn of een eenvoudige grafische gebruikersinterface met knoppen en invoervelden.
5
Zorg ervoor dat de gebruikersinterface fouten afhandelt, zoals het invoeren van ongeldige getallen of het uitvoeren van ongeldige berekeningen (bijv
delen door nul)
Toon duidelijke foutmeldingen en instructies om de gebruiker te helpen.

Extra uitdagingen (optioneel):
1
Voeg extra wetenschappelijke formules toe aan de Calculator-klasse, zoals trigonometrische functies (sin, cos, tan) en wortelfuncties.
2
Implementeer een grafische gebruikersinterface met behulp van Windows Forms of WPF, om een meer intuïtieve en visueel aantrekkelijke gebruikerservaring te bieden.
3
Implementeer een geschiedenisfunctie, zodat gebruikers eerdere berekeningen kunnen bekijken, en eventueel opnieuw kunnen gebruiken in nieuwe berekeningen.

Bronnen:
1
C# Programming Yellow Book (https://www.robmiles.com/s/CSharp-Programming-Yellow-Book-2019.pdf)
voor algemene C#-programmeerkennis en tips.
2
Microsoft C#-documentatie (https://docs.microsoft.com/nl-nl/dotnet/csharp/)
voor specifieke informatie over C#-syntax, klassen en methoden.
